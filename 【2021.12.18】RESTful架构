【学习笔记2021.12.18】
一、RESTful
    1、rest原则：https://www.cnblogs.com/loveis715/p/4669091.html
        Representational State Transfer(网页资源表现层状态转化)，wiki称之为“web服务架构风格”，其目标是为了创建具有良好扩展性的分布式系统。
        符合rest原则的架构，称为RESTful架构
    2、REST的指导原则
        1> 使用客户/服务器模型。客户和服务器之间通过一个统一的接口来互相通讯。
        2> 层次化的系统。在一个REST系统中，客户端并不会固定地与一个服务器打交道。
        3> 无状态。在一个REST系统中，服务端并不会保存有关客户的任何状态。也就是说，客户端自身负责用户状态的维持，并在每次发送请求时都需要提供足够的信息。
        4> 可缓存。REST系统需要能够恰当地缓存请求，以尽量减少服务端和客户端之间的信息传输，以提高性能。
        5> 统一的接口。一个REST系统需要使用一个统一的接口来完成子系统之间以及服务与用户之间的交互。这使得REST系统中的各个子系统可以独自完成演化。
            每个资源都拥有一个资源标识。每个资源的资源标识可以用来唯一地标明该资源。
            消息的自描述性。在REST系统中所传递的消息需要能够提供自身如何被处理的足够信息。例如该消息所使用的MIME类型，是否可以被缓存等。
            资源的自描述性。一个REST系统所返回的资源需要能够描述自身，并提供足够的用于操作该资源的信息，如如何对资源进行添加，删除以及修改等操作。也就是说，一个典型的REST服务不需要额外的文档对如何操作资源进行说明。
            HATEOAS。（后端驱动，前后端解耦）即客户只可以通过服务端所返回各结果中所包含的信息来得到下一步操作所需要的信息，如到底是向哪个URL发送请求等。也就是说，一个典型的REST服务不需要额外的文档标示通过哪些URL访问特定类型的资源，而是通过服务端返回的响应来标示到底能在该资源上执行什么样的操作。一个REST服务的客户端也不需要知道任何有关哪里有什么样的资源这种信息。

    3、通常基于HTTP通信协议
    4、如何构建RESTful风格的web服务应用（基于HTTP协议）
        1、资源识别
        2、资源的URL设计
        总的来说，既然使用HTTP来构建REST系统，那么我们就需要遵守URL各组成中的含义：URL中的相对路径将用来标示“What I want”，也既对应着资源；而请求参数则用来标示“How I want”，即查看资源的方式。
        3、使用合适的动词 GET POST  DELETE PUT
        4、使用标准的状态码 
            平衡易用性与准确性
        5、选择适当的表示结构（JSON、XML....）
        6、负载的自描述性
        7、无状态约束
            避免集群服务器间同步用户状态
        8、Authentication
            用户登录需要建立会话保持登录状态在服务器，而无状态原则又拒绝保存用户状态，解决方案：1、专用的登录服务器 2、代理
                登录机制：
                1.   基于HTTPS的Basic Access Authentication：优点易实现 缺点不安全
                2.   基于Cookie及Session的管理
        9、版本管理
            解决方案：1、在请求头accept中加版本号
                     2、在url中加版本号
            对于一个基于HTTP的REST服务而言，软件开发人员需要遵守如下的守则以保持API的后向兼容性：

            不能在请求中添加新的必须的参数。
            不能更改操作资源的动词。
            不能更改响应的HTTP status。
        10、性能
            在基于HTTP的REST服务中，性能提升主要分为两个方面：REST架构本身在提高性能方面做出的努力，以及基于HTTP协议的优化。

二、MIME媒体类型
    https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types
        application/octet-stream 这是应用程序文件的默认值。
        text/plain 文本文件默认值
        text/css
        text/html
        text/javascript
        image/jpeg
        audio/wav
        multipart/form-data
        application/json
三、幂等性
等幂性简单点说就是一次请求和多次请求，资源的状态是一样。
比如GET和HEAD，不论你请求多少次，资源还是在那里。请注意，DELETE和PUT也是等幂的，以为对同一个资源删除一次或者多次，结果是一样的，就是资源被删除了，不存在了。为什么说PUT也是等幂的？
当你PUT一个新资源的时候，资源被创建，再次PUT这个URI的时候，资源还是没变。当你PUT一个存在的资源时，更新了资源，再次PUT的时候，还是更新成这个样子。
在PUT更新的时候，不能做相对的更新（依赖资源现在的状态），比如每次对一个数加1，这样资源状态就会变化。应该每次更新成某个数，比如把某个数变成4，则无论多少次PUT，值都是4，这样就是等幂了。
我们设计Restful WS的时候，GET，HEAD, PUT, DELETE一定要设计成等幂的。由于网络是不可靠的，安全性和等幂性就显得特别重要。
如果一次请求，服务器收到处理以后，客户端没有收到相应，客户端会再次请求，如果没有等幂性保障，就会发生意想不到的问题。
POST是不安全也不等幂的，还是拿weblog的例子，如果两次POST相同的博文，则会产生两个资源，URI可能是这样/weblogs/myweblog/entries/1和/weblogs/myweblog/entries/2，尽管他们的内容是一摸一样的。